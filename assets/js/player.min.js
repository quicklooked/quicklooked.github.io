var vp_container = document.querySelector(".vp-container");
var player = document.querySelector(".player");
var play = document.querySelector(".play");
var video = document.getElementById("quickplayer");
var vp_controls = document.querySelector(".vp-controls");
var vp_preview = document.querySelector(".vp-preview");
var vp_outro_wrapper = document.querySelector(".vp-outro-wrapper");
var vp_spin = document.querySelector(".vp-spin");
var full_screen = document.querySelector(".fullscreenvideo");
var timeTotal = document.querySelector(".timecode");
var timeCode = document.getElementById("timeCode");
var focus_target = document.querySelector(".focus-target");
var progressPlayed = document.getElementById("progressPlayed");
var progresLoader = document.getElementById("progresLoader");
var progressLoadedMinibar = document.getElementById("progressLoadedMinibar");
var progressPlayedMinibar = document.getElementById("progressPlayedMinibar");
var progressBufferMinibar = document.getElementById("progressBufferMinibar");
var vp_left_zone = document.querySelector(".vp-left-zone");
var vp_right_zone = document.querySelector(".vp-right-zone");
var vp_outro_wrapper = document.querySelector(".vp-outro-wrapper");
var vp_target = document.querySelector(".vp-target");
var pipButton = document.querySelector(".pip");

function makeLandscape() {
  if(screen.orientation && screen.orientation.lock) {
    screen.orientation.lock('landscape');
  }
  else {
    screen.orientation.unlock();
  }
}

function landscape() {
  window.screen.orientation.lock("portrait").then(success => makeLandscape(), failure => console.log(failure))
}
this.openFullscreen = function() {
  vp_container.classList.add("vp-center");
  player.classList.add("only-in-fullscreen");
  player.style.maxWidth = "calc(177.778vh)";
  player.style.height = "calc(56.25vw)";
  if(player.requestFullScreen) {
    player.requestFullScreen();
  }
  else if(player.mozRequestFullScreen) {
    player.mozRequestFullScreen();
  }
  else if(player.webkitRequestFullScreen) {
    player.webkitRequestFullScreen();
  }
  this.fullscreen = true;
  landscape();
};
this.closeFullscreen = function() {
  vp_container.classList.remove("vp-center");
  player.classList.remove("only-in-fullscreen");
  player.style.maxWidth = "";
  player.style.height = "";
  if(document.cancelFullScreen) {
    document.cancelFullScreen();
  }
  else if(document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  }
  else if(document.webkitCancelFullScreen) {
    document.webkitCancelFullScreen();
  }
  this.fullscreen = false;
};
var toggleFullscreen = function(event) {
  event.preventDefault();
  if(!this.fullscreen) {
    this.openFullscreen();
  }
  else {
    this.closeFullscreen();
  }
  return false;
}.bind(this);

function loadStart() {
  vp_spin.classList.remove("vp-spin-invisible");
  progressBufferMinibar.classList.remove("hidden");
}

function canPlay() {
  vp_spin.classList.add("vp-spin-invisible");
  progressBufferMinibar.classList.add("hidden");
}

function videoplay() {
  vp_preview.classList.add("vp-preview-invisible");
  vp_controls.classList.remove("controls-outro");
  player.classList.remove("player-outroVisible");
  if(video.paused) {
    vp_outro_wrapper.classList.remove("in");
    play.classList.remove("state-paused");
    play.classList.add("state-playing");
    video.play();
  }
  else {
    play.classList.remove("state-playing");
    play.classList.add("state-paused");
    video.pause();
  }
}

function videoended() {
  vp_outro_wrapper.classList.add("in");
  vp_preview.classList.add("vp-preview-invisible");
  play.classList.remove("state-playing");
  play.classList.add("state-paused");
  vp_controls.classList.add("controls-outro");
  player.classList.add("player-outroVisible");
  progresLoader.style.width = "0%";
  progressPlayed.style.width = "0%";
  progressPlayedMinibar.style.width = "0%";
  progressLoadedMinibar.style.width = "0%";
  focus_target.ariaValueText = ("00:00" + " of " + `${neatTime(video.duration)}`);
  timeCode.innerHTML = `${neatTime(video.duration)}`;
  timeTotal.style.left = "0%";
  timeTotal.style.display = "block";
}


function rewind() {
  vid_currentTime = video.currentTime;
  video.currentTime = vid_currentTime - 10;
}

function fastforward() {
  vid_currentTime = video.currentTime;
  video.currentTime = vid_currentTime + 10;
}


function neatTime(time) {
  var hours = Math.floor((time % 86400) / 3600);
  var minutes = Math.floor((time % 3600) / 60);
  var seconds = Math.floor(time % 60);
  seconds = seconds > 9 ? seconds : `0${seconds}`;
  return `0${minutes}:${seconds}`;
}

function beginProgress(e) {
  timeCode.innerHTML = `${neatTime(video.duration)}`;
  timeTotal.style.left = "0%";
  timeTotal.style.display = "block";
  focus_target.ariaValueMax = video.duration;
  focus_target.ariaValueText = ("00:00" + " of " + `${neatTime(video.duration)}`);
  progresLoader.style.width = `${(video.buffered.end(0) / video.duration) * 100}%`;
  progressLoadedMinibar.style.width = `${(video.buffered.end(0) / video.duration) * 100}%`;
}

function updateProgress(e) {
  timeCode.innerHTML = `${neatTime(video.currentTime)}`;
  timeTotal.style.left = (video.currentTime / video.duration) * 100 + "%";
  focus_target.setAttribute("aria-valuenow", video.currentTime);
  focus_target.ariaValueText = (`${neatTime(video.currentTime)}` + " of " + `${neatTime(video.duration)}`);
  progressPlayed.style.width = (video.currentTime / video.duration) * 100 + "%";
  progressPlayedMinibar.style.width = (video.currentTime / video.duration) * 100 + "%";
}

var resetDelay, inactivityTimeout;
resetDelay = function() {
  clearTimeout(inactivityTimeout);
  inactivityTimeout = setTimeout(function() {
    vp_target.classList.add("hidden");
    vp_target.hidden = true;
    vp_controls.classList.remove("invisible");
    vp_controls.hidden = false;
  }, 10);
};

var resetDelays, inactivityTimeouts;
resetDelays = function() {
  clearTimeout(inactivityTimeouts);
  inactivityTimeouts = setTimeout(function() {
    vp_target.classList.remove("hidden");
    vp_target.hidden = false;
    vp_controls.classList.add("invisible");
    vp_controls.hidden = true;
  }, 2000);
};


vp_outro_wrapper.addEventListener("mouseover", resetDelay, false);
vp_outro_wrapper.addEventListener("mouseout", resetDelays, false);
vp_controls.addEventListener("mouseover", resetDelay, false);
vp_controls.addEventListener("mouseout", resetDelays, false);

play.addEventListener("click", videoplay, false);
video.addEventListener("click", videoplay, false);
video.addEventListener("ended", videoended, false);
video.addEventListener("loadstart", loadStart, false);
video.addEventListener("waiting", loadStart, false);
video.addEventListener("canplay", canPlay, false);
full_screen.addEventListener("click", toggleFullscreen, false);
video.addEventListener("canplay", beginProgress, false);
video.addEventListener("timeupdate", updateProgress, false);
vp_left_zone.addEventListener("click", rewind, false);
vp_right_zone.addEventListener("click", fastforward, false);

if ("pictureInPictureEnabled" in document) {
  pipButton.classList.remove("hidden");
  pipButton.hidden = false;
  pipButton.addEventListener("click", () => {
    if (document.pictureInPictureElement) {
      pipButton.classList.remove("return");
      pipButton.classList.add("enter");
      pipButton.title = "Enter Picture-in-Picture";
      document.exitPictureInPicture().catch((error) => {
      });
    } else {
      pipButton.title = "Exit Picture-in-Picture";
      pipButton.classList.remove("enter");
      pipButton.classList.add("return");
      video.requestPictureInPicture().catch((error) => {
      });
    }
  });
}

document.onkeydown = function(event) {
  switch(event.keyCode) {
    case 37:
      event.preventDefault();
      vid_currentTime = video.currentTime;
      video.currentTime = vid_currentTime - 10;
      break;
    case 39:
      event.preventDefault();
      vid_currentTime = video.currentTime;
      video.currentTime = vid_currentTime + 10;
      break;
    case 32:
      event.preventDefault();
      videoplay();
      break;
    case 38:
      event.preventDefault();
      video_vol = video.volume;
      if(video_vol != 1) {
        try {
          video.volume = video_vol + 0.1;
        }
        catch (err) {
          video.volume = 1;
        }
      }
      break;
    case 40:
      event.preventDefault();
      video_vol = video.volume;
      if(video_vol != 0) {
        try {
          video.volume = video_vol - 0.1;
        }
        catch (err) {
          video.volume = 0;
        }
      }
      break;
  }
};
